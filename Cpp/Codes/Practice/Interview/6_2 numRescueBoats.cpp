#include <gtest/gtest.h>
using namespace std;

/*
第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。
每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。
返回载到每一个人所需的最小船数。(保证每个人都能被船载)。

示例 1：
输入：people = [1,2], limit = 3
输出：1
解释：1 艘船载 (1, 2)
示例 2：
输入：people = [3,2,2,1], limit = 3
输出：3
解释：3 艘船分别载 (1, 2), (2) 和 (3)
示例 3：
输入：people = [3,5,3,4], limit = 5
输出：4
解释：4 艘船分别载 (3), (3), (4), (5)
提示：
1 <= people.length <= 50000
1 <= people[i] <= limit <= 30000
*/

namespace IV6_2
{
	class Solution {
	public:
		
		// 不限制人数
		int numRescueBoatsEx(vector<int>& people, int limit) {

			sort(people.begin(), people.end());
			int count = 0;
			int right = people.size() - 1;
			int left = 0;
			while (right >= left)
			{
				int rv = people[right--];
				while (left <= right)
				{
					int lv = people[left];
					if (rv + lv > limit)
					{
						break;
					}

					left++;
				}

				count++;
			}

			return count;
		}

		// 限制两个人
		int numRescueBoats(vector<int>& people, int limit) {

			sort(people.begin(), people.end());
			int count = 0;
			int right = people.size() - 1;
			int left = 0;
			while (right > left)
			{
				int rv = people[right--];
				if (rv + people[left] <= limit)
				{
					left++;
				}

				count++;
			}

			if (right == left)
			{
				count++;
			}

			return count;
		}
	};

	TEST(Interview, numRescueBoats)
	{
		Solution s;
		ASSERT_EQ(s.numRescueBoats(vector<int>{1, 2}, 3), 1);
		ASSERT_EQ(s.numRescueBoats(vector<int>{3, 2, 2, 1}, 3), 3);
		ASSERT_EQ(s.numRescueBoats(vector<int>{3, 5, 3, 4}, 5), 4);
		ASSERT_EQ(s.numRescueBoats(vector<int>{1, 2, 1, 1, 1, 2, 3, 1, 2, 2, 3, 1}, 3), 7);
	}
}